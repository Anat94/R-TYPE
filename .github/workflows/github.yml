name: Test Compilation

on: [pull_request]

jobs:
  clang_format:
    runs-on: ubuntu-latest
    # needs: [linux, windows]
    steps:
      - uses: actions/checkout@v2
      - name: Install clang-format
        run: |
          sudo apt-get install clang-format
      - name: Run format
        run: find ./src \( -name '*.cpp' -or -name '*.hpp' -or -name '*.h' \) -not -path "./src/json.hpp" -exec clang-format -style=file {} \;
      - name: Check if formated
        run: |
          git diff --exit-code
          status=$?
          if [ $status -eq 0 ]; then
            echo "clang-format check passed"
          else
            echo "clang-format check failed"
            git add .
            git commit -m "(clang-format) [FIX] format code by clang-format"
            git push
          fi


  linux:
    runs-on: ubuntu-latest
    name: Check compilation for linux
    needs: [clang_format]
    steps:
      - uses: actions/checkout@v4
      - name: Set up CMake
        uses: lukka/get-cmake@latest
        with:
          cmake-version: '3.5'

      - name: Install dependencies
        run: |
          sudo apt-get install libsfml-dev
          sudo apt-get install libboost-all-dev
          sudo apt-get install libx11-dev libxrandr-dev
          sudo apt-get install libudev-dev
          sudo apt-get install libopenal-dev
          sudo apt-get install libvorbis-dev
          sudo apt-get install libflac-dev
          sudo apt-get install libmongoc-1.0-0
          sudo apt-get install libbson-1.0
          sudo apt-get install libasio-dev
          sudo apt-get install libxcursor-dev

      - name: LINUX - Launch cmake
        run: cmake . && cmake --build .

      - name: LINUX - Launch tests
        run: cmake --build . --target my_tests

      - name: Archive Linux Executables
        uses: actions/upload-artifact@v2
        with:
          name: linux-executables
          path: |
            client
            server

  windows:
    runs-on: windows-latest
    name: Check compilation for windows
    needs: [clang_format]
    steps:
      - uses: actions/checkout@v2

      - name: Windows - Launch cmake
        run: cmake . && cmake --build .

      - name: WINOWS -  Launch tests
        run: cmake --build . --target my_tests

      - name: Archive Windows Executables
        uses: actions/upload-artifact@v2
        with:
          name: windows-executables
          path: |
            Debug/client.exe
            Debug/server.exe

  build:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [windows, linux]
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Download Linux Executables
        uses: actions/download-artifact@v2
        with:
          name: linux-executables
          path: build/linux_executables

      - name: Download Windows Executables
        uses: actions/download-artifact@v2
        with:
          name: windows-executables
          path: build/windows_executables

      - name: Move Linux executables
        run: |
          ls -a build/linux_executables # Verify the presence of the executables
          mkdir -p linux
          cp build/linux_executables/* ./linux/

      - name: Move Windows executables
        run: |
          mkdir -p windows
          cp build/windows_executables/* ./windows/

      - name: Archive the assets folder
        run: |
          zip -r assets.zip assets windows linux

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.run_number }}
          release_name: Release ${{ github.run_number }}
          body: |
            Changes in this Release
            - Updated client / server executables
            - Updated assets
          draft: false
          prerelease: false
          asset_overwrite: false
          exclude_sources: true


      - name: Upload Release Asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./assets.zip
          asset_name: assets-v${{ github.run_number }}.zip
          asset_content_type: application/zip

  deploy_doxygen:
    name: Generate doxygen documentation
    runs-on: ubuntu-latest
    needs: [windows, linux]
    steps:
      - uses: actions/checkout@v2
      - name: Install dependencies
        run: |
          sudo apt-get install doxygen
          sudo apt-get install graphviz

      - name: Deploy Doxygen
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./html